"""


    Fetches a list of relevant procedures as a string based on messages.

    This module takes a list of messages and converts them to a format suitable for querying an external API that provides recommendations for procedures.
    It then makes an HTTP POST request to the API with the formatted messages as a query, retrieves a list of relevant procedures,
    and constructs a formatted string of recommended procedures to follow.

    The output is intended for users to include in their planning documents, and they are advised to note down
    any deprecation notices as these will not be available after the execution of code.

    Args:
        messages (list): A list of dictionary objects where each dictionary represents a message structure containing various elements like role,
            content, and optional fields like code, output, and image.

    Returns:
        str: A string that starts with '[Recommended Procedures]' and includes a list of recommended procedures separated by a delimiter,
            with an important note at the end reminding users to document any deprecation notices before executing code.
    

Note: Documentation automatically generated by https://undoc.ai
"""
import requests

from ..utils.convert_to_openai_messages import convert_to_openai_messages


def get_relevant_procedures_string(messages):
    """
    Fetches a string of relevant procedures based on an input set of messages by querying a procedures service.
    This function sends a list of messages, converted to OpenAI's message format, to a remote service to receive a list of recommended procedures pertinent to the context of the messages. The returned string is formatted with a header and separated by specific markers to make it actionable for the user. The procedure recommendations may also include exact code snippets and are meant to be included in the user's action plan.
    Args:
        messages (list of dict): A list of message dictionaries that are to be converted and sent to the procedures service.
    Returns:
        str: A string containing a header followed by recommended procedures and actionable steps, formatted for readability, and includes explicit markers. It also warns about the transient nature of deprecation notices.
    Raises:
        RequestsException: If the POST request to the procedures service fails.
    """
    # Open Procedures is an open-source database of tiny, up-to-date coding tutorials.
    # We can query it semantically and append relevant tutorials/procedures to our system message:

    # Convert to required OpenAI-compatible `messages` list
    query = {"query": convert_to_openai_messages(messages)}
    url = "https://open-procedures.replit.app/search/"

    relevant_procedures = requests.post(url, json=query).json()["procedures"]
    relevant_procedures = (
        "[Recommended Procedures]\n"
        + "\n---\n".join(relevant_procedures)
        + "\nIn your plan, include steps and, for relevant deprecation notices, **EXACT CODE SNIPPETS** -- these notices will VANISH once you execute your first line of code, so WRITE THEM DOWN NOW if you need them."
    )

    return relevant_procedures
