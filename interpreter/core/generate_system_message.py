"""



Module: generate_system_message

This module provides a function to generate a composite system message containing various pieces of information ranging from user data to relevant procedures. The resulting string can incorporate dynamic data such as the user's operating system, username, and procedures applicable to the current context provided by the interpreter instance.

Functions:
    def generate_system_message(interpreter):
        '''Generates a composite system message with dynamic data elements.

        Constructs a detailed system message that includes default message content from an interpreter instance, and dynamically appends additional
        information such as user details and relevant procedures. In case of errors during procedure retrieval and if debug mode is active, the
        traceback is printed.

        Args:
            interpreter (Interpreter): An instance of the interpreter containing contextual configuration and state such as debug mode,
                                      message history, and flags for local execution and procedure inclusion.

        Returns:
            str: A string representing a comprehensive system message intended to provide detailed context-specific information
                 to the user as part of an interactive system.

        '''


Note: Documentation automatically generated by https://undoc.ai
"""
import traceback

from .rag.get_relevant_procedures_string import get_relevant_procedures_string
from .utils.get_user_info_string import get_user_info_string


def generate_system_message(interpreter):

    #### Start with the static system message

    system_message = interpreter.system_message

    #### Add dynamic components, like the user's OS, username, relevant procedures, etc

    system_message += "\n" + get_user_info_string()

    if not interpreter.local and not interpreter.disable_procedures:
        try:
            system_message += "\n" + get_relevant_procedures_string(
                interpreter.messages
            )
        except:
            if interpreter.debug_mode:
                print(traceback.format_exc())
            # It's okay if they can't. This just fixes some common mistakes it makes.

    return system_message
