"""

Creates an instance of a code interpreter for a given programming language specified in the configuration.

This function looks up the correct interpreter class from a language map dictionary based on the language specified in the input configuration. If the language is found in the map, an instance of the corresponding interpreter class is created with the given configuration. If the language is not supported, the function raises a ValueError.

Args:
    config (dict): A dictionary containing at least the key 'language', whose value is a string representing the programming language to be interpreted.

Returns:
    An instance of the interpreter class associated with the specified language.

Raises:
    ValueError: If the language specified in the config is unknown or unsupported according to the language map.

Note: Documentation automatically generated by https://undoc.ai
"""
from .language_map import language_map


def create_code_interpreter(config):
    """
    def create_code_interpreter(config):
        Creates an instance of a code interpreter based on given config dictionary. 
        The function looks up the 'language' key in the configuration, converts it to lowercase, 
        and attempts to retrieve an appropriate CodeInterpreter class from a predefined
        mapping (language_map). If the language is found, the function instantiates the
        class with the provided config and returns the instance. If the language is not
        found in the mapping, the function raises a ValueError indicating that the language
        is unknown or unsupported.
        Args:
            config (dict): A mapping with at least a 'language' key, used to determine which
                type of code interpreter to create.
        Returns:
            object: An instance of a class derived from BaseCodeInterpreter corresponding to
                the specified language in the config dictionary.
        Raises:
            ValueError: If the specified language is not found in the language mapping,
                indicating it is unsupported or unknown.
    """
    # Case in-sensitive
    language = config["language"].lower()

    try:
        CodeInterpreter = language_map[language]
        return CodeInterpreter(config)
    except KeyError:
        raise ValueError(f"Unknown or unsupported language: {language}")
