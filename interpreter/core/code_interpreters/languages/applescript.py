"""

Module to handle AppleScript code execution using subprocess within a Python environment.

This module defines a subclass of `SubprocessCodeInterpreter` to run AppleScript code within a subprocess, using
the system's default shell. It facilitates code preprocessing to include execution indicators and to handle
escaping of double quotes. The class is equipped with methods to detect signals of active line execution and
the end of the script execution.

Attributes:
    file_extension (str): The file extension used for AppleScript files.
    proper_name (str): The proper name for the scripting language.

Classes:
    AppleScript: Inherits from SubprocessCodeInterpreter and provides implementations for preprocessing
        and postprocessing of AppleScript code as well as methods to run the code within a subprocess.


Note: Documentation automatically generated by https://undoc.ai
"""
import os

from ..subprocess_code_interpreter import SubprocessCodeInterpreter


class AppleScript(SubprocessCodeInterpreter):
    """
    A class for handling execution of AppleScript code through a subprocess interface.
        This class provides a way to execute AppleScript code from Python by utilizing a subprocess to run the
        'osascript' command line tool. It is a subclass of `SubprocessCodeInterpreter`, implying it inherits
        methods and attributes for managing subprocess-based code execution.
        Attributes:
            file_extension (str): A class attribute that defines the file extension for AppleScript files, typically '.applescript'.
            proper_name (str): A class attribute that represents the proper name of the script type, in this case, 'AppleScript'.
            config (dict): A configuration dictionary specific to AppleScript execution.
            start_cmd (str): The command used to start the execution of the AppleScript.
        Methods:
            __init__(config):
                Initializes a new instance of the AppleScript class.
                Args:
                    config (dict): A configuration dictionary for AppleScript execution.
            preprocess_code(code):
                Prepares the AppleScript code for execution.
                Args:
                    code (str): The AppleScript code to preprocess.
                Returns:
                    str: The preprocessed code ready for execution through the subprocess.
            add_active_line_indicators(code):
                Adds indicators to the AppleScript code to mark active lines which are being executed.
                Args:
                    code (str): The AppleScript code to modify.
                Returns:
                    str: The modified code with active line indicators.
            detect_active_line(line):
                Detects and returns the currently active line number in the AppleScript execution.
                Args:
                    line (str): A line of output from the subprocess running the AppleScript code.
                Returns:
                    int or None: The active line number if detected, otherwise None.
            detect_end_of_execution(line):
                Checks if the passed line indicates the end of the AppleScript execution.
                Args:
                    line (str): A line of output from the subprocess running the AppleScript.
                Returns:
                    bool: True if the line indicates the end of execution, otherwise False.
    """
    file_extension = "applescript"
    proper_name = "AppleScript"

    def __init__(self, config):
        """
        Initializes the object with the provided configuration settings.
        Args:
            config (dict): A dictionary containing configuration parameters for the object initialization.
        Attributes:
            start_cmd (str): The command to start the shell, with a default value set to the SHELL environment variable, or '/bin/zsh' if the SHELL environment variable is not set.
        """
        super().__init__()
        self.config = config
        self.start_cmd = os.environ.get("SHELL", "/bin/zsh")

    def preprocess_code(self, code):
        """
        Preprocess a block of code for execution in an AppleScript environment.
        This method modifies the supplied `code` by adding active line indicators,
        escaping all double quotes, wrapping the entire string in double quotes,
        and prepending the necessary command to execute it as an AppleScript.
        It also appends a unique string to indicate the end of script execution.
        Args:
            code (str): The original block of code to be executed.
        Returns:
            str: The preprocessed code block ready for execution in AppleScript.
        """
        # Add active line indicators to the code
        code = self.add_active_line_indicators(code)

        # Escape double quotes
        code = code.replace('"', r"\"")

        # Wrap in double quotes
        code = '"' + code + '"'

        # Prepend start command for AppleScript
        code = "osascript -e " + code

        # Append end of execution indicator
        code += '; echo "##end_of_execution##"'

        return code

    def add_active_line_indicators(self, code):
        """
        Adds a logging indicator before each active line of code provided in the input string.
                This method takes a string representing the code to be modified and adds logging
                indicators in the form of a line prefixed with 'log "##active_line##"', where "##"
                is replaced by the line number starting at 1. These indicators are used to signal the
                execution of a line of code when reading logs, making it easier to identify the
                active line at any given time. The modified code, with active line indicators,
                is then returned as a single string.
                Args:
                    code (str): A string containing the code lines to be annotated with active
                                 line indicators.
                Returns:
                    str: The modified input code with active line indicators added before each
                         line that contains actual code (non-empty after stripping whitespace).
        """
        modified_lines = []
        lines = code.split("\n")

        for idx, line in enumerate(lines):
            # Add log command to indicate the line number
            if line.strip():  # Only add if line is not empty
                modified_lines.append(f'log "##active_line{idx + 1}##"')
            modified_lines.append(line)

        return "\n".join(modified_lines)

    def detect_active_line(self, line):
        """
        Detects an active line marker within a stream of text based on a given prefix.
            This method scans a provided text line for a specific prefix indicating an 'active line' marker. If the marker is found, the method attempts to extract and return the line number associated with the marker. If the extraction fails or the marker is not present, the method will return None, indicating no active line was detected.
            Args:
                line (str): The line of text to be scanned for an active line marker.
            Returns:
                int or None: An integer representing the detected active line number if the prefix is found and correctly formatted, otherwise None.
        """
        prefix = "##active_line"
        if prefix in line:
            try:
                return int(line.split(prefix)[1].split()[0])
            except:
                pass
        return None

    def detect_end_of_execution(self, line):
        """
        Detects if a specific marker indicating the end of execution is present in a given line of text.
            This function checks if the string '##end_of_execution##' exists within the provided line argument.
            It is used to identify if a certain point in the text signifies the termination of a process or execution.
            Args:
                line (str): The line of text in which to search for the end of execution marker.
            Returns:
                bool: True if '##end_of_execution##' is found within the line, False otherwise.
        """
        return "##end_of_execution##" in line
