"""

A module providing an interpreter for executing JavaScript code in a subprocess.

This module contains a specialized `JavaScript` class that extends `SubprocessCodeInterpreter` designed to run JavaScript code using Node.js. The class includes methods for preprocessing JavaScript code, post-processing output lines, detecting active execution lines, and detecting the end of code execution.

Attributes:
    file_extension (str): The file extension for JavaScript files, set to 'js'.
    proper_name (str): The proper name for the language, set to 'JavaScript'.

Methods:
    __init__(config):
        Initializes a new instance of the JavaScript interpreter with the given configuration.
        Args:
            config (dict): Configuration options for the JavaScript interpreter.

    preprocess_code(code):
        Preprocesses JavaScript code before execution.
        Args:
            code (str): The JavaScript code to preprocess.
        Returns:
            str: The preprocessed JavaScript code.

    line_postprocessor(line):
        Post-processes each line of output received from the execution.
        Args:
            line (str): A line of output from the subprocess.
        Returns:
            Optional[str]: The post-processed line or `None` if it should be discarded.

    detect_active_line(line):
        Detects the currently active line of code during execution.
        Args:
            line (str): A line of output from the subprocess.
        Returns:
            Optional[int]: The active line number if detected, or `None` otherwise.

    detect_end_of_execution(line):
        Determines whether the code execution has ended based on the output line.
        Args:
            line (str): A line of output from the subprocess.
        Returns:
            bool: True if the end of execution is detected, False otherwise.

Functions:
    preprocess_javascript(code):
        Processes JavaScript code by adding logging instructions for active lines and wrapping in a try-catch block.
        Args:
            code (str): The raw JavaScript code to preprocess.
        Returns:
            str: The processed JavaScript code, ready for execution.

Note: Documentation automatically generated by https://undoc.ai
"""
import re

from ..subprocess_code_interpreter import SubprocessCodeInterpreter


class JavaScript(SubprocessCodeInterpreter):
    """
    A class for interpreting and running JavaScript code within a subprocess.
        This class extends SubprocessCodeInterpreter to specifically handle the execution of JavaScript code using Node.js as the runtime. It sets up an interactive Node.js session and provides preprocessing and postprocessing methods to handle unique aspects of JavaScript code execution.
        Attributes:
            file_extension (str): A class attribute that specifies the associated file extension for JavaScript code, which is '.js'.
            proper_name (str): A class attribute that defines the proper name for the language, which is 'JavaScript'.
            config (dict): An instance attribute that stores configuration settings used for running JavaScript code.
            start_cmd (str): An instance attribute that defines the command to start Node.js interactive mode.
        Methods:
            __init__(self, config):
                Initializes the JavaScript class with a given configuration dictionary.
            preprocess_code(self, code):
                Applies preprocessing to JavaScript code before execution.
            line_postprocessor(self, line):
                Processes each output line from the execution of JavaScript code.
            detect_active_line(self, line):
                Detects the active line of code during an interactive session using a special markup.
            detect_end_of_execution(self, line):
                Determines if the end-of-execution token is present in the output line.
    """
    file_extension = "js"
    proper_name = "JavaScript"

    def __init__(self, config):
        """
        Initializes an instance of the class with given configuration settings.
        Args:
            config: An object containing the configuration settings necessary for initialization of the instance.
        Attributes:
            config (object): Stores the provided configuration object.
            start_cmd (str): The initial command to start the node interactive mode.
        """
        super().__init__()
        self.config = config
        self.start_cmd = "node -i"

    def preprocess_code(self, code):
        """
        Preprocess the input JavaScript code by modifying it for execution tracking purposes.
        This function takes a string representing JavaScript code, adds special console.log statements to each line
        of the code to track the active lines being executed, wraps the entire code with a try-catch block to
        handle errors, and appends a console.log as an end of execution marker. The processed code facilitates
        runtime monitoring and debugging by providing outputs that signify the flow of execution.
        Args:
            code (str): A string containing the JavaScript code to be preprocessed.
        Returns:
            str: The preprocessed JavaScript code with added execution tracking statements and error handling.
        """
        return preprocess_javascript(code)

    def line_postprocessor(self, line):
        """
        Processes a given line by examining its content and applying certain filters.
            This method is responsible for processing a single line of text from the stream. It first checks whether the line contains unwanted strings such as 'Welcome to Node.js', or whether it is 'undefined', or a Node.js REPL instruction. Such lines are discarded by returning None. If the line contains leading prompt characters ('>'), these are stripped off. The processed line, with modifications if applicable, is then returned.
            Args:
                line (str): The line of text from the output stream to be processed.
            Returns:
                str or None: The modified line ready for further processing if it passed
                    the checks, or None if the line should be discarded.
        """
        # Node's interactive REPL outputs a billion things
        # So we clean it up:
        if "Welcome to Node.js" in line:
            return None
        if line.strip() in ["undefined", 'Type ".help" for more information.']:
            return None
        # Remove trailing ">"s
        line = re.sub(r"^\s*(>\s*)+", "", line)
        return line

    def detect_active_line(self, line):
        """
            Detects if the provided line contains an active line marker.
            This function searches for a specific pattern '##active_line' within the input string.
            If the pattern is found, the function interprets the following characters up to the
            next '##' symbol as the active line number and returns it as an integer. If the
            pattern is not found, the function returns None.
            Args:
                line (str): The string to be searched for the active line marker.
            Returns:
                int or None: Returns the extracted line number if the active line marker is found,
                              otherwise, returns None.
        """
        if "##active_line" in line:
            return int(line.split("##active_line")[1].split("##")[0])
        return None

    def detect_end_of_execution(self, line):
        """
        Detects the presence of a specific end-of-execution marker in a given line of text.
        """
        return "##end_of_execution##" in line


def preprocess_javascript(code):
    """
    Preprocesses a given JavaScript code string by injecting specific markers that are used to
    identify and log executed lines and to handle exceptions. This assists in tracking the
    execution flow and pinpointing errors within the input code.
    The processing involves two main enhancements to the input code. Firstly, before each line
    of the original code, a console log statement is injected that marks the line about to be
    executed. The marker follows the format `##active_line{i}##`, where `{i}` is the one-based
    line number. Secondly, the entire code is wrapped in a try-catch block to capture and log
    any runtime exceptions that occur during the execution. Additionally, an `end_of_execution`
    marker is added after the closing brace of the try block to signal the end of the code
    execution.
    Parameters:
        code (str): The original JavaScript code as a string.
    Returns:
        str: The preprocessed JavaScript code with injected line markers, wrapped in a
            try-catch block, and appended with an end of execution marker.
    """

    # Split code into lines
    lines = code.split("\n")
    processed_lines = []

    for i, line in enumerate(lines, 1):
        # Add active line print
        processed_lines.append(f'console.log("##active_line{i}##");')
        processed_lines.append(line)

    # Join lines to form the processed code
    processed_code = "\n".join(processed_lines)

    # Wrap in a try-catch and add end of execution marker
    processed_code = f"""
try {{
{processed_code}
}} catch (e) {{
    console.log(e);
}}
console.log("##end_of_execution##");
"""

    return processed_code
