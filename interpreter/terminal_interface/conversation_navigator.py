"""

Module: conversation_navigator

This module facilitates navigation through a collection of stored conversations, allowing a user to select and resume a conversation. It provides a user interface to select a conversation from a list of available ones, which are stored as JSON files. The key component of this module is the conversation_navigator function which loads the chosen conversation into an interpreter for further interactions.

Functions:
    def conversation_navigator(interpreter):
        '''Guides a user through selecting and resuming a past conversation from stored JSON files.

        This function presents the user with a list of saved conversations, sorted by the last modification time. The user can select a conversation to resume it or choose to open the folder containing all conversations. Upon selection, the conversation details are set on the provided interpreter object, and the chat session is initiated.

        Args:
            interpreter (Interpreter): The interpreter object which will handle the chat session.

        '''

    def open_folder(path):
        '''Cross-platform function to open a folder in the system's default file explorer.

        Supports different operating systems such as Windows, macOS, and Linux. When called, this function opens the given path in the system's native file explorer.

        Args:
            path (str): The filesystem path to the folder which should be opened.

        '''

Note: Documentation automatically generated by https://undoc.ai
"""

import json
import os
import platform
import subprocess

import inquirer

from .render_past_conversation import render_past_conversation
from .utils.display_markdown_message import display_markdown_message
from .utils.local_storage_path import get_storage_path


def conversation_navigator(interpreter):
    """
    Navigates the user through a selection of stored conversation files and resumes interaction with a chosen conversation.
    This function provides a user interface to select a previously stored conversation from a specific 'conversations' subdirectory within the configured storage path. It lists all JSON files found in this directory, allowing the user to choose a conversation to resume. It also offers an option to open the folder containing the conversations. Once a conversation is selected, the function loads the stored messages from the chosen JSON file and initiates the conversation renderer which displays the conversation history. It then updates the provided interpreter's state with the messages and selected conversation filename, and starts the conversation interaction in the chat.
    Args:
        interpreter (Interpreter): An instance of the interpreter class that handles chat conversations.
    Returns:
        None: The function may open a directory or update the interpreter and initiate a chat session based on user selection, but does not return any value.
    """
    conversations_dir = get_storage_path("conversations")

    display_markdown_message(
        f"""> Conversations are stored in "`{conversations_dir}`".
    
    Select a conversation to resume.
    """
    )

    # Check if conversations directory exists
    if not os.path.exists(conversations_dir):
        print(f"No conversations found in {conversations_dir}")
        return None

    # Get list of all JSON files in the directory and sort them by modification time, newest first
    json_files = sorted(
        [f for f in os.listdir(conversations_dir) if f.endswith(".json")],
        key=lambda x: os.path.getmtime(os.path.join(conversations_dir, x)),
        reverse=True,
    )

    # Make a dict that maps reformatted "First few words... (September 23rd)" -> "First_few_words__September_23rd.json" (original file name)
    readable_names_and_filenames = {}
    for filename in json_files:
        name = (
            filename.replace(".json", "")
            .replace(".JSON", "")
            .replace("__", "... (")
            .replace("_", " ")
            + ")"
        )
        readable_names_and_filenames[name] = filename

    # Add the option to open the folder. This doesn't map to a filename, we'll catch it
    readable_names_and_filenames["> Open folder"] = None

    # Use inquirer to let the user select a file
    questions = [
        inquirer.List(
            "name",
            message="",
            choices=readable_names_and_filenames.keys(),
        ),
    ]
    answers = inquirer.prompt(questions)

    # If the user selected to open the folder, do so and return
    if answers["name"] == "> Open folder":
        open_folder(conversations_dir)
        return

    selected_filename = readable_names_and_filenames[answers["name"]]

    # Open the selected file and load the JSON data
    with open(os.path.join(conversations_dir, selected_filename), "r") as f:
        messages = json.load(f)

    # Pass the data into render_past_conversation
    render_past_conversation(messages)

    # Set the interpreter's settings to the loaded messages
    interpreter.messages = messages
    interpreter.conversation_filename = selected_filename

    # Start the chat
    interpreter.chat()


def open_folder(path):
    """
    Opens a folder using the default file manager for the given operating system.
    This function determines the current operating system and uses the appropriate command to
    open the specified folder in the default file manager. On Windows, it uses `os.startfile()`;
    on macOS (Darwin), it uses the `open` command via `subprocess.run`; and on Linux, it uses
    the `xdg-open` command, also via `subprocess.run`.
    Args:
        path (str): The file system path to the folder that is to be opened.
    Raises:
        OSError: An error occurs when the command to open the folder fails.
    """
    if platform.system() == "Windows":
        os.startfile(path)
    elif platform.system() == "Darwin":
        subprocess.run(["open", path])
    else:
        # Assuming it's Linux
        subprocess.run(["xdg-open", path])
