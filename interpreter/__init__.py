"""

A Python module that provides an instance of an `Interpreter` class upon import.

This module automatically creates and assigns an instance of the Interpreter class to
`sys.modules['interpreter']`, allowing users to directly import and use the instance.
The unconventional approach of directly assigning an instance to a module-level variable is
intended to streamline the user experience by reducing setup steps and providing immediate
access to the interpreter functionality.

The module also includes ASCII art in the comments, possibly as an aesthetic or branding choice, although it
has no functional impact on the code.

Attributes:
    Interpreter (Interpreter): An instance of the Interpreter class accessible when the
        module is imported.

Note:
    The practice of binding an instance to a module name is controversial since it goes
    against the typical behavior of modules, which is to act as namespaces for functions,
    classes, and variables rather than as a single object instance. However, the design choice is
    made to minimize friction for the end user.

Note: Documentation automatically generated by https://undoc.ai
"""
import sys
from .core.core import Interpreter

sys.modules["interpreter"] = Interpreter()

# ^ This is done so when users `import interpreter`,
# they get an instance.

# **This is a controversial thing to do,**
# because perhaps modules ought to behave like modules.

# But I think it saves a step, removes friction, and looks good.

#     ____                      ____      __                            __
#    / __ \____  ___  ____     /  _/___  / /____  _________  ________  / /____  _____
#   / / / / __ \/ _ \/ __ \    / // __ \/ __/ _ \/ ___/ __ \/ ___/ _ \/ __/ _ \/ ___/
#  / /_/ / /_/ /  __/ / / /  _/ // / / / /_/  __/ /  / /_/ / /  /  __/ /_/  __/ /
#  \____/ .___/\___/_/ /_/  /___/_/ /_/\__/\___/_/  / .___/_/   \___/\__/\___/_/
#      /_/                                         /_/
